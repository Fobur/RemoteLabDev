@page "/admin/users/create"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Data
@using BlazorApp1.Components.Account.Pages
@inject IDbContextFactory<BlazorApp1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>User</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="ApplicationUser" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Ник:</label>
                <InputText id="name" @bind-Value="ApplicationUser.UserName" class="form-control" />
                <ValidationMessage For="() => ApplicationUser.UserName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Пароль:</label>
                <InputText id="name" @bind-Value="Password" class="form-control" />
                <ValidationMessage For="() => Password" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Почта:</label>
                <InputText id="name" @bind-Value="ApplicationUser.Email" class="form-control" />
                <ValidationMessage For="() => ApplicationUser.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Роль:</label>
                <InputText id="name" @bind-Value="Role" class="form-control" />
                <ValidationMessage For="() => Role" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Имя:</label>
                <InputText id="name" @bind-Value="ApplicationUser.Name" class="form-control" />
                <ValidationMessage For="() => ApplicationUser.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Фамиилия:</label>
                <InputText id="name" @bind-Value="ApplicationUser.Surname" class="form-control" />
                <ValidationMessage For="() => ApplicationUser.Surname" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Отчество:</label>
                <InputText id="name" @bind-Value="ApplicationUser.Patronymic" class="form-control" />
                <ValidationMessage For="() => ApplicationUser.Patronymic" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="admin/users">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public ApplicationUser ApplicationUser { get; set; } = new();

    [SupplyParameterFromForm]
    public string Password { get; set; }

    [SupplyParameterFromForm]
    public string Role { get; set; }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddUser()
    {
        if (await UserManager.FindByEmailAsync(ApplicationUser.Email) == null)
        {
            var user = new ApplicationUser();
            user.Email = ApplicationUser.Email;
            user.UserName = ApplicationUser.UserName;
            user.Name = ApplicationUser.Name;
            user.Surname = ApplicationUser.Surname;
            user.Patronymic = ApplicationUser.Patronymic;
            user.EmailConfirmed = true;

            await UserManager.CreateAsync(user, Password);
            await UserManager.AddToRoleAsync(user, Role);
        }

        NavigationManager.NavigateTo("/admin/users/");
    }
}
