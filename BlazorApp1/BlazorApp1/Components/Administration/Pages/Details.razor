@page "/admin/users/details"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Data
@inject IDbContextFactory<BlazorApp1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>User</h4>
    <hr />
    @if (user is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Username</dt>
            <dd class="col-sm-10">@user.UserName</dd>
            <dt class="col-sm-2">Фамилия</dt>
            <dd class="col-sm-10">@user.Email</dd>
            <dt class="col-sm-2">Имя</dt>
            <dd class="col-sm-10">@user.Name</dd>
            <dt class="col-sm-2">Фамилия</dt>
            <dd class="col-sm-10">@user.Surname</dd>
            <dt class="col-sm-2">Отчетство</dt>
            <dd class="col-sm-10">@user.Patronymic</dd>
        </dl>
        <div>
            <a href="@($"/admin/users/edit?id={user.Id}")">Edit</a> |
            <a href="@($"/admin/users")">Back to List</a>
        </div>
    }
</div>

@code {
    ApplicationUser? user;

    [SupplyParameterFromQuery]
    public string ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        user = await context.Users.FirstOrDefaultAsync(m => m.Id == ID);
        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
