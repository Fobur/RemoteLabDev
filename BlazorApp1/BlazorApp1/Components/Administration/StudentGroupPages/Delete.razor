@page "/admin/studentgroups/delete"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Models
@inject IDbContextFactory<BlazorApp1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Удаление учебной группы</PageTitle>

<h1>Удаление учебной группы</h1>

<h3>Вы уверены что хотите удалить эту учебную группу?</h3>
<div>
    <h4>Учебная группа</h4>
    <hr />
    @if (studentgroup is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Название группы</dt>
            <dd class="col-sm-10">@studentgroup.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Описание</dt>
            <dd class="col-sm-10">@studentgroup.Description</dd>
        </dl>
        <EditForm method="post" Model="studentgroup" OnValidSubmit="DeleteStudentGroup" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(studentgroup is null)">Удалить</button> |
            <a href="/admin/studentgroups">Назад к списку учебных групп</a>
        </EditForm>
    }
</div>

@code {
    StudentGroup? studentgroup;

    [SupplyParameterFromQuery]
    public string ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        studentgroup = await context.StudentGroups.FirstOrDefaultAsync(m => m.Id == ID);

        if (studentgroup is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteStudentGroup()
    {
        using var context = DbFactory.CreateDbContext();
        context.StudentGroups.Remove(studentgroup!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/admin/studentgroups");
    }
}
