@page "/admin/studentGroups/edit"

@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Models
@inject IDbContextFactory<BlazorApp1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>StudentGroup</h4>
<hr />
@if (StudentGroup is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="StudentGroup" OnValidSubmit="UpdateStudentGroup" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="StudentGroup.ID" value="@StudentGroup.ID" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="StudentGroup.Name" class="form-control" />
                    <ValidationMessage For="() => StudentGroup.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="StudentGroup.Description" class="form-control" />
                    <ValidationMessage For="() => StudentGroup.Description" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/admin/studentgroups">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public string ID { get; set; }

    [SupplyParameterFromForm]
    public StudentGroup? StudentGroup { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        StudentGroup ??= await context.StudentGroups.FirstOrDefaultAsync(m => m.ID == ID);

        if (StudentGroup is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateStudentGroup()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(StudentGroup!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!StudentGroupExists(StudentGroup!.ID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/admin/studentgroups");
    }

    bool StudentGroupExists(string id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.StudentGroups.Any(e => e.ID == id);
    }
}
