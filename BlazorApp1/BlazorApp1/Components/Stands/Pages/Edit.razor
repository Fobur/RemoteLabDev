@page "/stands/edit"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Models
@inject IDbContextFactory<BlazorApp1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Редактировать стенд</PageTitle>

<h1>Редактировать стенд</h1>

<h4>Стенд</h4>
<hr />
@if(Stand == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Stand" OnValidSubmit="UpdateStand" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Stand.ID" value="@Stand.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Название стенда:</label>
                    <InputText id="name" @bind-Value="Stand.Name" class="form-control" />
                    <ValidationMessage For="() => Stand.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Описание:</label>
                    <InputText id="description" @bind-Value="Stand.Description" class="form-control" />
                    <ValidationMessage For="() => Stand.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="videourl" class="form-label">Ссылка на видеопоток:</label>
                    <InputText id="videourl" @bind-Value="Stand.VideoUrl" class="form-control" />
                    <ValidationMessage For="() => Stand.VideoUrl" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="ansiblescript" class="form-label">Ansible скрипт:</label>
                    <InputText id="ansiblescript" @bind-Value="Stand.AnsibleScript" class="form-control" />
                    <ValidationMessage For="() => Stand.AnsibleScript" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить изменения</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/stands">Назад к списку стендов </a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int ID { get; set; }

    [SupplyParameterFromForm]
    public Stand? Stand { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Stand ??= await context.Stand.FirstOrDefaultAsync(m => m.Id == ID);
        if (Stand is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateStand()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Stand!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!StandExists(Stand!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/stands");
    }

    bool StandExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Stand.Any(e => e.Id == id);
    }
}
